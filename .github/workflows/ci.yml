######################
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_REGISTRY: docker.io
  FRONTEND_IMAGE: fierdakcap/weather-frontend
  BACKEND_IMAGE: fierdakcap/weather-backend

jobs:
  ### ====================
  ### ðŸ§ª Test Backend
  ### ====================
  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run tests
        working-directory: backend
        env:
          OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
          WEATHER_API_BASE_URL: ${{ secrets.WEATHER_API_BASE_URL }}
        run: |
          PYTHONPATH=. pytest tests/ -v --cov=app --cov-report=xml
          flake8 app/ --max-line-length=88 || echo "Linting issues found but not blocking"
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage.xml
      # - name: Run SonarQube Scanner for Backend
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: |
      #     curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
      #     unzip sonar-scanner.zip
      #     ./sonar-scanner-*/bin/sonar-scanner \
      #       -Dsonar.projectKey=weather-backend \
      #       -Dsonar.sources=app \
      #       -Dsonar.host.url=https://100f48ac957c.ngrok-free.app \
      #       -Dsonar.login=$SONAR_TOKEN \
      #       -Dsonar.python.coverage.reportPaths=coverage.xml


  ### ====================
  ### ðŸ§ª Test Frontend
  ### ====================
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Clean install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Lint and test
        run: |
          npx eslint . --report-unused-disable-directives --max-warnings 0
          npm run test

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/lcov.info

      # - name: Run SonarQube Scanner for Frontend
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   working-directory: frontend
      #   run: |
      #     curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
      #     unzip sonar-scanner.zip
      #     ./sonar-scanner-*/bin/sonar-scanner \
      #       -Dsonar.projectKey=weather-frontend \
      #       -Dsonar.sources=src \
      #       -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
      #       -Dsonar.host.url=https://100f48ac957c.ngrok-free.app \
      #       -Dsonar.login=$SONAR_TOKEN \



  ### ====================
  ### ðŸ”¨ Build Backend Image
  ### ====================
  build-backend:
    runs-on: ubuntu-latest
    needs: [test-backend]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        working-directory: backend
        run: |
          docker build -t $BACKEND_IMAGE:${{ github.sha }} .
          docker tag $BACKEND_IMAGE:${{ github.sha }} $BACKEND_IMAGE:latest
          docker push $BACKEND_IMAGE:${{ github.sha }}
          docker push $BACKEND_IMAGE:latest

  ### ====================
  ### ðŸ”¨ Build Frontend Image
  ### ====================
  build-frontend:
    runs-on: ubuntu-latest
    needs: [test-frontend]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push frontend image
        working-directory: frontend
        run: |
          docker build -t $FRONTEND_IMAGE:${{ github.sha }} .
          docker tag $FRONTEND_IMAGE:${{ github.sha }} $FRONTEND_IMAGE:latest
          docker push $FRONTEND_IMAGE:${{ github.sha }}
          docker push $FRONTEND_IMAGE:latest
